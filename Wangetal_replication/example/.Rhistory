# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load data
W1 <- load("ICPSR_21600_W1/DS0001/W1_Data.rda")
View(da21600.0001)
# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#libraries
# load data
W1 <- load("ICPSR_21600_NET_W1/DS0001/W1_NET_Data.rda")
W1 <- load("ICPSR_21600_NET_W1/DS0003/W1_NET_Data.rda")
View(da21600.0003)
View(da21600.0003)
5200*12
2500*10
5200*12+2500*10
# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#libraries
# load data
W1 <- load("ICPSR_21600_W1/DS0001/W1_Data.rda")
net1 <- load("ICPSR_21600_NET_W1/DS0003/W1_NET_Data.rda")
View(da21600.0001)
load("/Users/johnpschoeneman/Dropbox/Wangetal_replication/ICPSR_21600/DS0004/21600-0004-Data.rda")
View(da21600.0004)
length(unique(da21600.0004$CLUSTER2))
load("/Users/johnpschoeneman/Dropbox/Wangetal_replication/ICPSR_21600/DS0002/21600-0002-Data.rda")
View(da21600.0002)
View(da21600.0004)
# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load("ICPSR_21600_W1_1/DS0001/21600-0001-Data.rda")
load("ICPSR_21600_W1_2/DS0002/21600-0002-Data.rda")
View(da21600.0002)
load("ICPSR_21600_W1_3/DS0003/21600-0003-Data.rda") #network variables
load("ICPSR_21600_W1_4/DS0004/21600-0004-Data.rda") #weights
View(da21600.0001)
colnames(da21600.0001)
View(da21600.0002)
View(da21600.0003)
View(da21600.0004)
View(da21600.0004)
View(da21600.0004)
# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load libraries
library(Matrix)
karate <- read.graph("karate/karate.gml", format = "gml")
library(igraph)
karate <- read.graph("karate/karate.gml", format = "gml")
class(karate)
# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(ergm)
data(zach)
library(ergm.count)
data(zach)
sf <- zach.fit1$sample-zach.fit1$sample.obs
t.k <- abs(apply(sf,2,mean))/apply(zach.fit1$sample,2,sd)
tconv.max <- sqrt(t(apply(sf,2,mean) %*% solve(as.matrix(cov(sf))) %*% apply(sf,2,mean)))
zach.fit1 <- ergm(zach~nonzero+sum+nodefactor("role",base=2)+absdiffcat("faction.id"),
response="contexts", reference=~Binomial(8),
control=control.ergm(MCMLE.trustregion=1000))
sf <- zach.fit1$sample-zach.fit1$sample.obs
t.k <- abs(apply(sf,2,mean))/apply(zach.fit1$sample,2,sd)
tconv.max <- sqrt(t(apply(sf,2,mean) %*% solve(as.matrix(cov(sf))) %*% apply(sf,2,mean)))
zach.fit1$sample
-zach.fit1$sample.obs
zach.fit1$sample.obs
zach.fit1 <- ergm(zach~edges+nodefactor("role",base=2)+absdiffcat("faction.id"))
zach.fit1$sample.obs
zach.fit1$sample
zach.fit1 <- ergm(zach~edge)
zach.fit1 <- ergm(zach~edges)
sf <- zach.fit1$sample-zach.fit1$sample.obs
library(ergm)
zach.fit1 <- ergm(zach~edges)
class(zach)
edge.attributes(zach)
# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load libraries
library(statnet)
m1 = ergm(n ~ edges)
# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load libraries
library(ergm)
#First, read in the sociomatrix
ga.mat<-getURL("https://docs.google.com/spreadsheet/pub?key=0Ai--oOZQWBHSdDE3Ynp2cThMamg1b0VhbEs0al9zV0E&single=true&gid=0&output=txt",
ssl.verifypeer = FALSE)
ga.mat<-as.matrix(read.table(textConnection(ga.mat), sep="\t",
header=T, row.names=1, quote="\""))
#Second, read in the network attributes
ga.atts<-getURL("https://docs.google.com/spreadsheet/pub?key=0Ai--oOZQWBHSdDE3Ynp2cThMamg1b0VhbEs0al9zV0E&single=true&gid=1&output=txt",
ssl.verifypeer = FALSE)
ga.atts<-read.table(textConnection(ga.atts), sep="\t", header=T, quote="\"",
stringsAsFactors=F, strip.white=T, as.is=T)
#Third, create a network object using the sociomatrix and its corresponding attributes
ga.net<-network(ga.mat, vertex.attr=ga.atts, vertex.attrnames=colnames(ga.atts),
directed=F, hyper=F, loops=F, multiple=F, bipartite=F)
library(ergm)
library(RCurl)
#First, read in the sociomatrix
ga.mat<-getURL("https://docs.google.com/spreadsheet/pub?key=0Ai--oOZQWBHSdDE3Ynp2cThMamg1b0VhbEs0al9zV0E&single=true&gid=0&output=txt",
ssl.verifypeer = FALSE)
ga.mat<-as.matrix(read.table(textConnection(ga.mat), sep="\t",
header=T, row.names=1, quote="\""))
#Second, read in the network attributes
ga.atts<-getURL("https://docs.google.com/spreadsheet/pub?key=0Ai--oOZQWBHSdDE3Ynp2cThMamg1b0VhbEs0al9zV0E&single=true&gid=1&output=txt",
ssl.verifypeer = FALSE)
ga.atts<-read.table(textConnection(ga.atts), sep="\t", header=T, quote="\"",
stringsAsFactors=F, strip.white=T, as.is=T)
#Third, create a network object using the sociomatrix and its corresponding attributes
ga.net<-network(ga.mat, vertex.attr=ga.atts, vertex.attrnames=colnames(ga.atts),
directed=F, hyper=F, loops=F, multiple=F, bipartite=F)
ga.base<-ergm(ga.net~edges+nodematch("sex")) #Estimate the model
# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load libraries
library(ergm)
library(RCurl)
#First, read in the sociomatrix
ga.mat<-getURL("https://docs.google.com/spreadsheet/pub?key=0Ai--oOZQWBHSdDE3Ynp2cThMamg1b0VhbEs0al9zV0E&single=true&gid=0&output=txt",
ssl.verifypeer = FALSE)
ga.mat<-as.matrix(read.table(textConnection(ga.mat), sep="\t",
header=T, row.names=1, quote="\""))
#Second, read in the network attributes
ga.atts<-getURL("https://docs.google.com/spreadsheet/pub?key=0Ai--oOZQWBHSdDE3Ynp2cThMamg1b0VhbEs0al9zV0E&single=true&gid=1&output=txt",
ssl.verifypeer = FALSE)
ga.atts<-read.table(textConnection(ga.atts), sep="\t", header=T, quote="\"",
stringsAsFactors=F, strip.white=T, as.is=T)
ga.net<-network(ga.mat, vertex.attr=ga.atts, vertex.attrnames=colnames(ga.atts),
directed=F, hyper=F, loops=F, multiple=F, bipartite=F)
# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load libraries
library(ergm)
library(RCurl)
#First, read in the sociomatrix
ga.mat<-getURL("https://docs.google.com/spreadsheet/pub?key=0Ai--oOZQWBHSdDE3Ynp2cThMamg1b0VhbEs0al9zV0E&single=true&gid=0&output=txt",
ssl.verifypeer = FALSE)
ga.mat<-as.matrix(read.table(textConnection(ga.mat), sep="\t",
header=T, row.names=1, quote="\""))
#Second, read in the network attributes
ga.atts<-getURL("https://docs.google.com/spreadsheet/pub?key=0Ai--oOZQWBHSdDE3Ynp2cThMamg1b0VhbEs0al9zV0E&single=true&gid=1&output=txt",
ssl.verifypeer = FALSE)
ga.atts<-read.table(textConnection(ga.atts), sep="\t", header=T, quote="\"",
stringsAsFactors=F, strip.white=T, as.is=T)
#Third, create a network object using the sociomatrix and its corresponding attributes
ga.net<-network(ga.mat, vertex.attr=ga.atts, vertex.attrnames=colnames(ga.atts),
directed=F, hyper=F, loops=F, multiple=F, bipartite=F)
View(ga.mat)
View(ga.atts)
View(ga.atts)
# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#We will need the following libraries:
library(network)
library(ergm)
#This undirected adjacency matrix includes 'all' relationships between characters in Grey's Anatomy.
#Read in the adj matrix without the first column
grey <- read.csv("Grey_sex.csv",header=T)[,-1]
#Read in node attributes, which include Gender, Race, Birth Year, Professional Position, Season he/she first appears, and astrological sign.
attributes <- read.csv("Grey_Attributes.csv",header=T)
#Create a network object using the sociomatrix and its attributes
ga.net<-network(grey, vertex.attrnames=colnames(attributes),
directed=F, hyper=F, loops=F, multiple=F, bipartite=F)
#Set vertex attributes
set.vertex.attribute(ga.net,names(attributes),attributes)
#Arguments for the ergm function:
ga.fit1<-ergm(
ga.net~edges+nodematch("sex"), #network object~terms you want to test for
response=NULL, #node attributes you want to model
reference=~Bernoulli, #reference measure to be used:
#DiscUnif(a,b), Unif(a,b), StdNormal
constraints=~.,
#offset.coef, vector of coeffs for the offset terms
#target.stats,vector of observed network stats on left hand side of formula,
#use if observed differ from those programed...
eval.loglik = TRUE,
estimate="MPLE", #c("MPLE","MLE","CD")
#control=list(),
verbose=TRUE)
summary(ga.fit1) #Summarize the model
#Age and Race
ga.fit5<-ergm(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear"),control=control.ergm(
MCMC.burnin=50000, MCMC.interval=5000))
summary(ga.fit5)
#Age and Race
model5<-ergm(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear"),control=control.ergm(
MCMC.burnin=50000, MCMC.interval=5000))
summary(model5)
sf <- model5$sample-model5$sample.obs
model5$sample.obs
model5<-ergm(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear"),control=control.ergm(
MCMC.burnin=50000, MCMC.interval=5000), constraints=~bd(attribs=sexattr,maxout=maxout))
model5<-ergm(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear"),control=control.ergm(
MCMC.burnin=50000, MCMC.interval=5000), constraints=~bd(attribs=sex,maxout=maxout))
model5<-ergm(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear"),control=control.ergm(
MCMC.burnin=50000, MCMC.interval=5000), constraints=~bd(attribs="sex",maxout=maxout))
model5<-ergm(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear"),control=control.ergm(
MCMC.burnin=50000, MCMC.interval=5000), constraints=~bd(attribs="sex"))
