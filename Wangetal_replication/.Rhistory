#Create a network object using the sociomatrix and its attributes
ga.net<-network(grey, vertex.attrnames=colnames(attributes),
directed=F, hyper=F, loops=F, multiple=F, bipartite=F)
#Set vertex attributes
set.vertex.attribute(ga.net,names(attributes),attributes)
View(attributes)
View(grey)
seq(3,44,8)
for(r in seq(3,44,8)){
for(c in seq(3,44,8)){
print(r,c)
}
}
rc <- seq(3,44,8)
rc[1]
44*44
for(i in 1:5){
for(j in 2:5){
print(rc[i], rc[j])
}
}
?print
library(gtools)
permutations(n=5,r=2,v=rc,repeats.allowed=F)
rc <- seq(3,44,8)
rc <- permutations(n=5,r=2,v=rc,repeats.allowed=F)
rc <- seq(3,44,8)
rc <- permutations(n=length(rc),r=2,v=rc,repeats.allowed=F)
View(rc)
nrow(rc)
rc[i,1]
rc[i,2]
grey[rc[i,1],rc[i,2]]
for(i in 1:nrow(rc)){
grey[rc[i,1],rc[i,2]] <-NA
}
View(grey)
#Read in node attributes, which include Gender, Race, Birth Year, Professional Position, Season he/she first appears, and astrological sign.
attributes <- read.csv("Grey_Attributes.csv",header=T)
#Create a network object using the sociomatrix and its attributes
ga.net<-network(grey, vertex.attrnames=colnames(attributes),
directed=F, hyper=F, loops=F, multiple=F, bipartite=F)
ga.net[rbind(c(1,4),c(3,5))] <- NA
#Set vertex attributes
set.vertex.attribute(ga.net,names(attributes),attributes)
model5<-ergm(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear"),control=control.ergm(
MCMC.burnin=50000, MCMC.interval=5000))
model5$sample.obs
model5$sample
sf <- model5$sample-model5$sample.obs
length(model5$sample)
length(model5$sample.obs)
model5$sample
model5$sample.obs
model5$sample
length(model5$sample.obs)
length(model5$sample)
# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#We will need the following libraries:
library(network)
library(ergm)
library(gtools)
#This undirected adjacency matrix includes 'all' relationships between characters in Grey's Anatomy.
#Read in the adj matrix without the first column
grey <- read.csv("Grey_sex.csv",header=T)[,-1]
# create some missingness
rc <- seq(3,44,8)
rc <- permutations(n=length(rc),r=2,v=rc,repeats.allowed=F)
for(i in 1:nrow(rc)){
grey[rc[i,1],rc[i,2]] <-NA
}
#Read in node attributes, which include Gender, Race, Birth Year, Professional Position, Season he/she first appears, and astrological sign.
attributes <- read.csv("Grey_Attributes.csv",header=T)
#Create a network object using the sociomatrix and its attributes
ga.net<-network(grey, vertex.attrnames=colnames(attributes),
directed=F, hyper=F, loops=F, multiple=F, bipartite=F)
ga.net[rbind(c(1,4),c(3,5))] <- NA
#Set vertex attributes
set.vertex.attribute(ga.net,names(attributes),attributes)
model5<-ergm(ga.net~edges+#nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear"),control=control.ergm(
MCMC.burnin=50000, MCMC.interval=5000))
length(model5$sample)
length(model5$sample.obs)
model5<-ergm(ga.net~edges+nodematch("sex")+#degree(1)+nodematch("race")+
absdiff("birthyear"),control=control.ergm(
MCMC.burnin=50000, MCMC.interval=5000))
model5<-ergm(ga.net~edges+nodematch("sex")+degree(1)+#nodematch("race")+
absdiff("birthyear"),control=control.ergm(
MCMC.burnin=50000, MCMC.interval=5000))
length(model5$sample)
length(model5$sample.obs)
rc <- seq(3,44,3)
rc <- permutations(n=length(rc),r=2,v=rc,repeats.allowed=F)
for(i in 1:nrow(rc)){
grey[rc[i,1],rc[i,2]] <-NA
}
#Read in node attributes, which include Gender, Race, Birth Year, Professional Position, Season he/she first appears, and astrological sign.
attributes <- read.csv("Grey_Attributes.csv",header=T)
#Create a network object using the sociomatrix and its attributes
ga.net<-network(grey, vertex.attrnames=colnames(attributes),
directed=F, hyper=F, loops=F, multiple=F, bipartite=F)
#Set vertex attributes
set.vertex.attribute(ga.net,names(attributes),attributes)
#Model 5
model5<-ergm(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear"),control=control.ergm(
MCMC.burnin=50000, MCMC.interval=5000))
length(model5$sample.obs)
length(model5$sample)
model5<-ergm(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear")+gwesp(Î´opt,fixed=T),control=control.ergm(
MCMC.burnin=50000, MCMC.interval=5000))
summary(model5)
model5<-ergm(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear")+gwesp(.5,fixed=T),control=control.ergm(
MCMC.burnin=50000, MCMC.interval=5000))
length(model5$sample)
length(model5$sample.obs)
?mapply
a <- model5$sample
b <- model5$sample.obs
a <- date.frame(model5$sample)
a <- as.date.frame(model5$sample)
a <- as.data.frame(model5$sample)
b <- as.data.frame(model5$sample.obs)
View(b)
View(a)
View(a)
?sweep
# clear workspace
#rm(list=ls())
#set.seed(19)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#We will need the following libraries:
library(network)
library(ergm)
library(gtools)
#This undirected adjacency matrix includes 'all' relationships between characters in Grey's Anatomy.
#Read in the adj matrix without the first column
grey <- read.csv("Grey_sex.csv",header=T)[,-1]
# create some missingness
rc <- seq(3,44,3)
rc <- permutations(n=length(rc),r=2,v=rc,repeats.allowed=F)
for(i in 1:nrow(rc)){
grey[rc[i,1],rc[i,2]] <-NA
}
#Read in node attributes, which include Gender, Race, Birth Year, Professional Position, Season he/she first appears, and astrological sign.
attributes <- read.csv("Grey_Attributes.csv",header=T)
#Create a network object using the sociomatrix and its attributes
ga.net<-network(grey, vertex.attrnames=colnames(attributes),
directed=F, hyper=F, loops=F, multiple=F, bipartite=F)
ga.net[rbind(c(1,4),c(3,5))] <- NA
#Set vertex attributes
set.vertex.attribute(ga.net,names(attributes),attributes)
model5<-ergm(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear"),control=control.ergm(
MCMC.burnin=50000, MCMC.interval=5000,init=coef(model5a),MCMLE.last.boost=1))
model5a<-ergm(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear"),control=control.ergm(
MCMC.burnin=50000, MCMC.interval=5000))
model5<-ergm(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear"),control=control.ergm(
MCMC.burnin=50000, MCMC.interval=5000,init=coef(model5a),MCMLE.last.boost=1))
sf <- model5$sample-model5$sample.obs
t.k <- abs(apply(sf,2,mean))/apply(model5$sample,2,sd)
tconv.max <- sqrt(t(apply(sf,2,mean) %*% solve(as.matrix(cov(sf))) %*% apply(sf,2,mean)))
while (max(t.k)>0.1 | tconv.max>0.25) {
par <- coef(model5)
model5 <- ergm(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear"),control=control.ergm(
MCMC.burnin=50000, MCMC.interval=5000,init=coef(model5a),MCMLE.last.boost=1))
sf <- model5$sample-model5$sample.obs
t.k <- abs(apply(sf,2,mean)/apply(model5$sample,2,sd))
tconv.max <- sqrt(t(apply(sf,2,mean) %*% solve(as.matrix(cov(sf))) %*% apply(sf,2,mean)))
}
net.fit<-model5
net.sim5<-simulate(net.fit,
constraints=~observed+bd(attribs=sexattr,minout=minout,maxout=maxout),
nsim=250)
net.fit<-model5
net.sim5<-simulate(net.fit,
constraints=~observed,
nsim=250)
View(rc)
length(net.sim5)
model1 <-as.formula(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear"))
sample(nrow(rc), 3)
rc[sample(nrow(rc), 3),]
View(grey)
score <-vector()
?vector
score <-vector(NA,5)
score <-vector("any",5)
score <-vector("list",5)
score <-vector("integer",5)
score <-vector("numeric",5)
# clear workspace
#rm(list=ls())
#set.seed(19)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#We will need the following libraries:
library(network)
library(ergm)
library(gtools)
source('functions.R')
#This undirected adjacency matrix includes 'all' relationships between characters in Grey's Anatomy.
#Read in the adj matrix without the first column
grey <- read.csv("Grey_sex.csv",header=T)[,-1]
# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#We will need the following libraries:
library(network)
library(ergm)
library(gtools)
source('functions.R')
#This undirected adjacency matrix includes 'all' relationships between characters in Grey's Anatomy.
#Read in the adj matrix without the first column
grey <- read.csv("Grey_sex.csv",header=T)[,-1]
#This undirected adjacency matrix includes 'all' relationships between characters in Grey's Anatomy.
#Read in the adj matrix without the first column
grey <- read.csv("example/Grey_sex.csv",header=T)[,-1]
#create data with NAs
df_NA <- insert_NAs(data=grey, type = c("both"), partial_level = .1, complete_level = .1)
df_NA <- insert_NAs(data=grey, type = "both", partial_level = .1, complete_level = .1)
data_NA <- grey
cp_sample <- sample(nrow(data), round(partial_level*nrow(data)))
partial_level = .1, complete_level = .1
partial_level = .1
complete_level = .1
cp_sample <- sample(nrow(data), round(partial_level*nrow(data)))
cp_sample <- sample(nrow(data_NA), round(partial_level*nrow(data_NA)))
for(i in 1:nrow(cp_sample)){
data_NA[,i] <-NA
data_NA[i,] <-NA
}
source('functions.R')
df_NA <- insert_NAs(data=grey, type = "both", partial_level = .1, complete_level = .1)
View(data_NA)
for(i in 1:length(cp_sample)){
data_NA[,i] <-NA
data_NA[i,] <-NA
}
View(data_NA)
data_NA <- grey
cp_sample <- sample(nrow(data_NA), round(partial_level*nrow(data_NA)))
for(i in cp_sample){
data_NA[,i] <-NA
data_NA[i,] <-NA
}
View(data_NA)
data_NA <- grey
cp_sample <- sample(nrow(data_NA), round(partial_level*nrow(data_NA)))
for(i in cp_sample){
data_NA[i,] <-NA
}
data=grey
pp <- seq(1,nrow(data),1)
pp <- permutations(n=length(pp),r=2,v=rc,repeats.allowed=F)
pp <- permutations(n=length(pp),r=2,v=pp,repeats.allowed=F)
pp_sample <- pp[sample(nrow(pp), round(partial_level*nrow(pp))), ]
for(i in 1:nrow(pp_sample)){
data_NA[pp_sample[i,1],pp_sample[i,2]] <-NA
}
# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#We will need the following libraries:
library(network)
library(ergm)
library(gtools)
source('functions.R')
#Read in the adj matrix without the first column
grey <- read.csv("example/Grey_sex.csv",header=T)[,-1]
df_NA <- insert_NAs(data=grey, type = "both", partial_level = .1, complete_level = .1)
View(df_NA)
attributes <- read.csv("example/Grey_Attributes.csv",header=T)
#Create a network object using the sociomatrix and its attributes
ga.net<-network(df_NA, vertex.attrnames=colnames(attributes),
directed=F, hyper=F, loops=F, multiple=F, bipartite=F)
#Set vertex attributes
set.vertex.attribute(ga.net,names(attributes),attributes)
#define model
model1 <-as.formula(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear"))
df_NAs <- ergm_predictions(model1)
# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#We will need the following libraries:
library(network)
library(ergm)
library(gtools)
source('functions.R')
#This undirected adjacency matrix includes 'all' relationships between characters in Grey's Anatomy.
#Read in the adj matrix without the first column
grey <- read.csv("example/Grey_sex.csv",header=T)[,-1]
#create data with NAs
df_NA <- insert_NAs(data=grey, type = "partial", partial_level = .1, complete_level = .1)
attributes <- read.csv("example/Grey_Attributes.csv",header=T)
#Create a network object using the sociomatrix and its attributes
ga.net<-network(df_NA, vertex.attrnames=colnames(attributes),
directed=F, hyper=F, loops=F, multiple=F, bipartite=F)
#Set vertex attributes
set.vertex.attribute(ga.net,names(attributes),attributes)
#define model
model1 <-as.formula(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear"))
#Estimate
df_NAs <- ergm_predictions(model1
)
df_NAs <- return_accuracy(df_NAs, grey)
length(df_NAs)
df_NAs[1]
df_NAs[[1]]
as.matrix.network(df_NAs[[1]])
score_list <- return_accuracy(df_NAs, grey)
source('functions.R')
score_list <- return_accuracy(df_NAs, grey)
simulations=df_NAs
observed = grey
score <-vector("numeric",length(simulations))
test = as.matrix.network(simulations[1])-observed
as.matrix.network(simulations[1])
as.matrix.network(simulations[[1]])-observed
for(i in length(simulations)){
test = as.matrix.network(simulations[[i]])-observed
score[i] = sum(test)/(nrow(observed)^2)
}
View(test)
for(i in length(simulations)){
test = as.matrix.network(simulations[[i]])-observed
score[i] = sum(abs(test))/(nrow(observed)^2)
}
score
View(test)
abs(test)
sum(abs(test))
nrow(observed)^2
sum(abs(test))/(nrow(observed)^2)
score[i] = sum(abs(test))/(nrow(observed)^2)
score
source('functions.R')
score_list <- return_accuracy(df_NAs, grey)
source('functions.R')
score_list <- return_accuracy(df_NAs, grey)
mean(score_list)
View(test)
install.packages("latentnet", dependencies=TRUE)
library(latentnet)
latent_model <- ergmm(model1,control=control.ergmm(
burnin=50000, interval=5000))
latent_model <- ergmm(model1,control.ergmm(burnin=50000, interval=5000))
latent_model <- ergmm(model1,control=control.ergmm(burnin=50000, interval=5000))
latent_model <- ergmm(model1,control=control.ergmm(MCMC.burnin=50000, MCMC.interval=5000))
latent_model <- ergmm(model1,control=ergmm.control(burnin=1000,sample.size= 2000,interval=5))
latent_model <- ergmm(model1,control=ergmm.control(burnin=50000,sample.size= 2000,interval=5000))
latent_model <- ergmm(model1,control=ergmm.control(burnin=10000,sample.size= 2000,interval=500))
latent_model <- ergmm(model1,control=ergmm.control(burnin=10000,sample.size= 2000,interval=5))
latent.sim<-simulate(latent_model, constraints=~observed,nsim=250)
latent.sims <- simulate(latent_model, nsim=1)
latent.sims[1]
latent.sims
latent.sims[[1]]
latent.sims <- simulate(latent_model, nsim=2)
latent.sims[[1]]
as.matrix.network(latent.sims[[1]])
as.matrix.network(latent.sims[1])
as.matrix.network(latent.sims[[2]])
as.matrix.network(latent.sims[[3]])
as.matrix.network(latent.sims[2])
latent.sims[[2]]
latent.sims[[2]][1]
as.matrix.network(latent.sims[[2]][1])
as.matrix(latent.sims[[2]][1])
as.matrix(latent.sims[[2]][2])
as.matrix(latent.sims[[3]][2])
as.matrix(latent.sims[[4]][2])
as.matrix(latent.sims[[5]][2])
latent.sims[[4]][2]
latent.sims[[3]][2]
latent.sims[[2]][2]
latent.sims
latent.sims[[1]]
latent.sims[[[1]]]
latent.sims[[1]]
latent.sims[[1]][1]
latent.sims[[1]][2]
latent.sims[[1]][3]
latent.sims[[1]][4]
latent.sims[[1]][5]
latent.sims[[1]][6]
latent.sims[[1]][10]
latent.sims[[1]][100]
latent.sims[1][1]
latent.sims[1][2]
latent.sims[1][3]
latent.sims[1][4]
latent.sims[1][5]
latent.sims[1][6]
latent.sims[2][6]
latent.sims[1]
latent.sims[[2]]
latent.sims[[2]]$matric
latent.sims[[2]]$matrix
latent.sims[[2]]
latent.sims$networks
latent.sims$networks[1]
latent.sims$networks[[1]
]
latent.sims$networks$values
latent.sims$networks[1]
sociomatrix(latent.sims$networks[1], matrix.type="adjacency", attrname = NULL)
library(latentnet)
sociomatrix(latent.sims$networks[1], matrix.type="adjacency", attrname = NULL)
latent.sims[[1]]
latent.sims[[1]][1]
latent.sims[[2]][1]
sociomatrix(latent.sims[[2]][1], matrix.type="adjacency", attrname = NULL)
as.sociomatrix(latent.sims[[2]][1], matrix.type="adjacency", attrname = NULL)
return_accuracy_l <-function(simulations, observed){
score <-vector("numeric",length(simulations))
for(i in 1:length(simulations)){
test = as.matrix.network(simulations[[i]])-observed
score[i] = sum(abs(test))/(nrow(observed)^2)
}
return(score)
}
score_list_latent <- return_accuracy_l(latent.sims, grey)
length(latent.sims)
length(latent.sims[[2]])
return_accuracy_l <-function(simulations, observed){
score <-vector("numeric",length(simulations))
for(i in 1:length(simulations)){
test = as.sociomatrix(simulations[i], matrix.type="adjacency", attrname = NULL)-observed
score[i] = sum(abs(test))/(nrow(observed)^2)
}
return(score)
}
score_list_latent <- return_accuracy_l(latent.sims[[2]], grey)
mean(score_list_latent)
#=============================================================#
# John Schoeneman
# Work Done For: FDI Network Analysis RA-IGERT
# Date: Spring 2017
# Work Done: Rope Ladder Plots for Years
# Machine: MacPro OSX Yosemite
#=============================================================#
# model fit objects on in Box Folder "fdi_models"; 'wo' signifies no network terms
# clear workspace and set seed
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(doBy)
library(network)
m_name <- paste("models_tweight/model2_",02, "_w.rda", sep="")
load(m_name)
m_name <- paste("models_tweight/model2_","02", "_w.rda", sep="")
load(m_name)
fit.01.2$coef
fit.01.2$sample.obs
fit.01.2$network
m_name <- paste("models_tweight/model2_","03", "_w.rda", sep="")
load(m_name)
fit.01.2$network
m_name <- paste("models_tweight/model2_","04", "_w.rda", sep="")
load(m_name)
fit.01.2$network
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(network)
library(ergm)
library(gtools)
library(latentnet)
source('functions.R')
grey <- read.csv("example/Grey_sex.csv",header=T)[,-1]
#create data with NAs
df_NA <- insert_NAs(data=grey, type = "partial", partial_level = .1, complete_level = .1)
#Read in node attributes, which include Gender, Race, Birth Year, Professional Position, Season he/she first appears, and astrological sign.
attributes <- read.csv("example/Grey_Attributes.csv",header=T)
#Create a network object using the sociomatrix and its attributes
ga.net<-network(df_NA, vertex.attrnames=colnames(attributes),
directed=F, hyper=F, loops=F, multiple=F, bipartite=F)
#Set vertex attributes
set.vertex.attribute(ga.net,names(attributes),attributes)
#define model
model1 <-as.formula(ga.net~edges+nodematch("sex")+degree(1)+nodematch("race")+
absdiff("birthyear"))
#Estimate
net_sims <- ergm_predictions(model1)
#check accuracy
score_list <- return_accuracy(net_sims, grey)
mean(score_list)
#estimate
latent_model <- ergmm(model1,control=ergmm.control(burnin=10000,sample.size= 2000,interval=5))
#simulate
latent.sims <- simulate(latent_model, nsim=2)
score_list_latent <- return_accuracy_l(latent.sims[[2]], grey, df_NA)
mean(score_list_latent)
source('functions.R')
score_list_latent <- return_accuracy_l(latent.sims[[2]], grey, df_NA)
mean(score_list_latent)
